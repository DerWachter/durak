#include <iostream>
#include <conio.h>
#include <vector>
#include <iterator>
#include <algorithm>
#include <time.h>
#include <QCoreApplication>

using namespace std;

struct Card{
    int rank;
    int suit;
    bool isTrump;
};

struct PlayerHand{
   vector<Card> pCards;
};

struct GameTable{       //Игровой стол
    vector<Card> attack; //Карты в атаке
    vector<Card> defense; //Карты в защите
    int pDefender;   //Защищающийся игрок
};

int main(int argc, char *argv[])
{
    srand(static_cast<unsigned int>(time(0)));

    const int HEART = 1;   //Масти
    const int DIAMOND = 2;
    const int CLUB = 3;
    const int SPADE = 4;
    int PLAYER_NUMBER = 2;
    int TRUMP;

    int i;
    int cardID;
    PlayerHand p[PLAYER_NUMBER];
    GameTable Table;

    vector<Card> Deck(36);     //Колода по умолчанию

    for (i = 0; i < 9; i++) {   //Червы
        Deck[i].rank = i + 6;
        Deck[i].suit = HEART;
    }

    for (i = 9; i < 18; i++) {   //Бубны
        Deck[i].rank = i - 3;
        Deck[i].suit = DIAMOND;
    }

    for (i = 18; i < 27; i++) {   //Трефы
        Deck[i].rank = i - 12;
        Deck[i].suit = CLUB;
    }

    for (i = 27; i < 36; i++) {   //Пики
        Deck[i].rank = i - 21;
        Deck[i].suit = SPADE;
    }

    vector<Card> AllCards(Deck);   //Игровая колода

    random_shuffle(AllCards.begin(),AllCards.end());   //Перетасовка колоды  - ПОЧИНЕНО

    TRUMP = AllCards[35].suit;      //Установка козырной масти

    for (i=0; i < 36; i++) {      //Заполнение графы "Козырь" всех карт
        if (AllCards[i].suit == TRUMP) {
            AllCards[i].isTrump = true;
        }
    }

    for (i=0; i<PLAYER_NUMBER; i++) {      //TODO: Вынести из main как функцию giveCards
        if ( p[i].pCards.size() < 6) {
            do {
            p[i].pCards.insert(p[i].pCards.end(), AllCards[0]);
            AllCards.erase(AllCards.begin());
            } while (p[i].pCards.size() < 6);
        }
    }

    //Старая раздача рук
    /*for (i=0; i < 6; i++) {              //Раздача руки первого игрока
        p[0].pCards.insert(p[0].pCards.end(), AllCards[0]);
        AllCards.erase(AllCards.begin());
    }

    for (i=0; i < 6; i++) {              //Раздача руки второго игрока
        p[1].pCards.insert(p[1].pCards.end(), AllCards[0]);
        AllCards.erase(AllCards.begin());
    }*/

    //Вывод колоды и рук игроков
    /*for (i = 0; i < 6; i++) {
        cout << p[0].pCards[i].rank << "-" << p[0].pCards[i].suit << "-" << p[0].pCards[i].isTrump << "\n";
    }
    cout << "\n";
    for (i = 0; i < 6; i++) {
        cout << p[1].pCards[i].rank << "-" << p[1].pCards[i].suit << "-" << p[1].pCards[i].isTrump << "\n";
    }
    cout << "\n";
    for (i = 0; i < 24; i++) {
        cout << AllCards[i].rank << "-" << AllCards[i].suit << "-" << AllCards[i].isTrump << "\n";
    }
    cout << "\n" << "T - " << TRUMP;*/


    cout << "First player turn\n";
    Table.pDefender = 1;
    cout << "Enter card number to go: \n";
    for (i = 0; i < 6; i++) {
        cout << i << " = " << p[0].pCards[i].rank << "-" << p[0].pCards[i].suit << "-" << p[0].pCards[i].isTrump << "  ";
    }
    cout << "\n";
    cin >> cardID;
    cout << "Chosen card is " << p[0].pCards[cardID].rank << "-" << p[0].pCards[cardID].suit << "-" << p[0].pCards[cardID].isTrump << "\n";

    Table.attack.insert(Table.attack.end(), p[0].pCards[cardID]);
    p[0].pCards.erase(p[0].pCards.begin() + cardID);

    cout << "Now your cards is: \n";
    for (i = 0; i < 5; i++) {
        cout << i << " = " << p[0].pCards[i].rank << "-" << p[0].pCards[i].suit << "-" << p[0].pCards[i].isTrump << "  ";
    }

    cout << "\n\nSecond player turn\n";
    cout << "You attacked with " << Table.attack[0].rank << "-" << Table.attack[0].suit << "-" << Table.attack[0].isTrump << "\n";;
    cout << "Enter card number to defend: \n";
    for (i = 0; i < 6; i++) {
        cout << i << " = " << p[1].pCards[i].rank << "-" << p[1].pCards[i].suit << "-" << p[1].pCards[i].isTrump << "  ";
    }
    cout << "\n";
    cin >> cardID;

}
